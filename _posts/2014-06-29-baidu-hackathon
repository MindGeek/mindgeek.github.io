---
layout: post
title: "当我Hackathon落选时 我谈些什么"
description: ""
category: "Chinese"
tags: [mind, geek]
---
{% include JB/setup %}

今天是我第二次参加公司的Hackathon活动。虽然又没能如愿当上“黑马”，但仍然学到了不少的东西。

Hackathon是Hack和Marathon的组合，中文直译过来叫做“编程马拉松”，是互联网公司内比较喜欢的一个活动。一般是某天下班后，公司在某个大型的会场或者Loft空间摆下几排桌子，准备充足的各种饮料小吃。员工们抛弃之前部门的藩篱，2-3个人自由组队，实现自己天马行空的创想。和单纯提出新的想法不同，Hackathon注重的是实现。你有个令人拍案叫绝的点子还不够，还必须有能力把想法做出来，并能在第二天演示给大家看。据我所知，Facebook会在每个月定期举行这样的Hackathon活动。谣传现在被大家所熟知的Graph Search，最初的原形就来自于一次Hackathon活动。

我之前曾说，Hackathon是百度最吸引我的东西，现在我依然这么觉得。他让你能有机会和资源，将自己的想法付诸行动，并在一个时间点集中爆发出来。最关键的，他还有交付和展示环节。让你的想法有观众倾听，并给你中肯的反馈。这就好比一场小型的创业经历：从想法的提出，到团队的组建；写出第一行代码，到站在台上演示。开始你可能灵光乍现，思如泉涌，产品的功能点五花八门。没准到了最后，你却不得不因为技术实现上或者时间上的种种制约因素而做出妥协。我经历了两次这样的“创业”，我有话要说。

百度搞Hackathon这次已经是第九季了。我来公司后有幸参加过两次。第一次是与福特合作的"Ford车载云"主题Hackathon。当时福特携新出炉的SYNC AppLink平台来到百度，和公司LBS等多部门一起合作组织了一次活动。我本身对LBS就比较感兴趣，加之又有一个非常有意思的平台，当时参与的热情高涨极了。几乎是几个晚上不睡觉，完善自己的想法和设计，并在论坛上纠集了两个同好来共同组队实现。

我们当时的想法是搞一个智能的语音助手：可以根据用户在LBS的日常轨迹，离线挖掘出他日常的上班线路，并在他每次开车上班前，给他当前这条路况的提醒。现在想来，当时如果能踏踏实实的把这个想法踏踏实实落地，实现一个完成度比较高的作品，没准能拿个一等奖也说不定。但当时我们仨都是第一次参加Hackathon，没有经验，也高估了自己的能力。讨论了几轮过后，大家都觉得这个想法太普通，实现出来不够惊艳。最终的想法是要做一个类似VR的概念。在手机上装一个APP，可以把自己的福特汽车变成虚拟世界里的一辆坦克。可以用开车的方式去探索周遭世界（类似红警中的探索地图），并赢得rewards。现在想来这个想法的确太天马行空了，而且以我们三个的能力，很难在24小时之内做一个像模像样的demo出来。但当时的我们（尤其是我），好像打了鸡血一样的“疯狂”，一夜没合眼，一直在不断的尝试去完成这个想法。但是因为在前端能力上的不足，在几个关健技术点上卡住了，终究还是没有拿得出手的作品演示。我只得空手套白狼的，搞了个PPT去宣讲了一下我们的想法，结果自然可想而知了。

第一次的“创业”经历告诉我这样的道理：
- 组建核心技术团队一定要优势互补，你必须清楚的知道实现你的创想技术难度在哪里，并且尽量找到在该领域你能找到的最强的人过来协助你；
- 永远只将精力投入到最核心的功能点上去，而不是东一下西一下。能把一个问题解决得彻底和漂亮，本身就很不容易；
- 演示的时候，用大家能听得懂的语言；

相比第一次，第二次的Hackathon想法有些仓促，周五晚上竞赛开始后我才临时起意，结果找部门总监走了个后门才顺利报上名。这次特意选择了一个小而美的点来做，并且找到了我能找到的前端最牛的人来和我一起组队。不过因为他周末比较忙，我们总共开发的时间加起来也就不到3小时，最终出来的效果其实差强人意，不够打动评委，最终还是没能入选。不过我这次的心态放得比较平和，本来就是参与第一，名次第二的事情。而这样的心态，恰恰使我这次能够张开耳朵去仔细聆听别人的idear，打开双手去为别人的精彩作品鼓掌。我这次更认真的参与了其他团队的最终展示环节，当了一把最投入的观众（上次完全是自己埋头背词好么...）。倾听他人，反而是我这次的收获更大。

第二次的“创业”经历，我意识到下面的几点：
- 好的作品，需要有一个合适的表达，才能让观众理解。尤其是时间非常有限的情况下（最终展示只有3分钟），你一定要用最高效的语言，和最容易让人接受的方式，把你作品里最亮点的东西演示出来；
- 做创新容易，做有市场的创新难，做有市场且有可行性且能利用现有资源推得起来的创新太难。不要只从程序员的角度思索实现的技术难度。一件事能否做成，技术难度往往只占很小的一部分；
- 不要因为我能做这个事情，而做这个事情。你需要解决一个实际的问题，而你的问题要是大多数人的痛点；

Hackathon如创业，且行且珍惜。
